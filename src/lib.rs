#![allow(non_camel_case_types, non_upper_case_globals)]

extern crate libc;

/* automatically generated by rust-bindgen */

pub type jack_native_thread_t = ::libc::pthread_t;
pub type jack_uuid_t = ::libc::uint64_t;
pub type jack_shmsize_t = ::libc::int32_t;
pub type jack_nframes_t = ::libc::uint32_t;
pub type jack_time_t = ::libc::uint64_t;
pub type jack_intclient_t = ::libc::uint64_t;
pub enum Struct__jack_port { }
pub type jack_port_t = Struct__jack_port;
pub enum Struct__jack_client { }
pub type jack_client_t = Struct__jack_client;
pub type jack_port_id_t = ::libc::uint32_t;
pub type jack_port_type_id_t = ::libc::uint32_t;
pub type Enum_JackOptions = ::libc::c_uint;
pub const JackNullOption: ::libc::c_uint = 0;
pub const JackNoStartServer: ::libc::c_uint = 1;
pub const JackUseExactName: ::libc::c_uint = 2;
pub const JackServerName: ::libc::c_uint = 4;
pub const JackLoadName: ::libc::c_uint = 8;
pub const JackLoadInit: ::libc::c_uint = 16;
pub const JackSessionID: ::libc::c_uint = 32;
pub type jack_options_t = Enum_JackOptions;
pub type Enum_JackStatus = ::libc::c_uint;
pub const JackFailure: ::libc::c_uint = 1;
pub const JackInvalidOption: ::libc::c_uint = 2;
pub const JackNameNotUnique: ::libc::c_uint = 4;
pub const JackServerStarted: ::libc::c_uint = 8;
pub const JackServerFailed: ::libc::c_uint = 16;
pub const JackServerError: ::libc::c_uint = 32;
pub const JackNoSuchClient: ::libc::c_uint = 64;
pub const JackLoadFailure: ::libc::c_uint = 128;
pub const JackInitFailure: ::libc::c_uint = 256;
pub const JackShmFailure: ::libc::c_uint = 512;
pub const JackVersionError: ::libc::c_uint = 1024;
pub const JackBackendError: ::libc::c_uint = 2048;
pub const JackClientZombie: ::libc::c_uint = 4096;
pub type jack_status_t = Enum_JackStatus;
pub type Enum_JackLatencyCallbackMode = ::libc::c_uint;
pub const JackCaptureLatency: ::libc::c_uint = 0;
pub const JackPlaybackLatency: ::libc::c_uint = 1;
pub type jack_latency_callback_mode_t = Enum_JackLatencyCallbackMode;
pub type JackLatencyCallback =
    ::std::option::Option<extern "C" fn(mode: jack_latency_callback_mode_t,
                                        arg: *mut ::libc::c_void) -> ()>;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct__jack_latency_range {
    pub min: jack_nframes_t,
    pub max: jack_nframes_t,
}
impl ::std::clone::Clone for Struct__jack_latency_range {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__jack_latency_range {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type jack_latency_range_t = Struct__jack_latency_range;
pub type JackProcessCallback =
    ::std::option::Option<extern "C" fn(nframes: jack_nframes_t,
                                        arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackThreadCallback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void)
                              -> *mut ::libc::c_void>;
pub type JackThreadInitCallback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void) -> ()>;
pub type JackGraphOrderCallback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackXRunCallback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackBufferSizeCallback =
    ::std::option::Option<extern "C" fn(nframes: jack_nframes_t,
                                        arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackSampleRateCallback =
    ::std::option::Option<extern "C" fn(nframes: jack_nframes_t,
                                        arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackPortRegistrationCallback =
    ::std::option::Option<extern "C" fn(port: jack_port_id_t,
                                        arg1: ::libc::c_int,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type JackClientRegistrationCallback =
    ::std::option::Option<extern "C" fn(name: *const ::libc::c_char,
                                        arg1: ::libc::c_int,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type JackPortConnectCallback =
    ::std::option::Option<extern "C" fn(a: jack_port_id_t, b: jack_port_id_t,
                                        connect: ::libc::c_int,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type JackPortRenameCallback =
    ::std::option::Option<extern "C" fn(port: jack_port_id_t,
                                        old_name: *const ::libc::c_char,
                                        new_name: *const ::libc::c_char,
                                        arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackFreewheelCallback =
    ::std::option::Option<extern "C" fn(starting: ::libc::c_int,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type JackShutdownCallback =
    ::std::option::Option<extern "C" fn(arg: *mut ::libc::c_void) -> ()>;
pub type JackInfoShutdownCallback =
    ::std::option::Option<extern "C" fn(code: jack_status_t,
                                        reason: *const ::libc::c_char,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type jack_default_audio_sample_t = ::libc::c_float;
pub type Enum_JackPortFlags = ::libc::c_uint;
pub const JackPortIsInput: ::libc::c_uint = 1;
pub const JackPortIsOutput: ::libc::c_uint = 2;
pub const JackPortIsPhysical: ::libc::c_uint = 4;
pub const JackPortCanMonitor: ::libc::c_uint = 8;
pub const JackPortIsTerminal: ::libc::c_uint = 16;
pub type Enum_Unnamed1 = ::libc::c_uint;
pub const JackTransportStopped: ::libc::c_uint = 0;
pub const JackTransportRolling: ::libc::c_uint = 1;
pub const JackTransportLooping: ::libc::c_uint = 2;
pub const JackTransportStarting: ::libc::c_uint = 3;
pub const JackTransportNetStarting: ::libc::c_uint = 4;
pub type jack_transport_state_t = Enum_Unnamed1;
pub type jack_unique_t = ::libc::uint64_t;
pub type Enum_Unnamed2 = ::libc::c_uint;
pub const JackPositionBBT: ::libc::c_uint = 16;
pub const JackPositionTimecode: ::libc::c_uint = 32;
pub const JackBBTFrameOffset: ::libc::c_uint = 64;
pub const JackAudioVideoRatio: ::libc::c_uint = 128;
pub const JackVideoFrameOffset: ::libc::c_uint = 256;
pub type jack_position_bits_t = Enum_Unnamed2;
#[repr(C, packed)]
#[derive(Copy)]
pub struct Struct__jack_position {
    pub unique_1: jack_unique_t,
    pub usecs: jack_time_t,
    pub frame_rate: jack_nframes_t,
    pub frame: jack_nframes_t,
    pub valid: jack_position_bits_t,
    pub bar: ::libc::int32_t,
    pub beat: ::libc::int32_t,
    pub tick: ::libc::int32_t,
    pub bar_start_tick: ::libc::c_double,
    pub beats_per_bar: ::libc::c_float,
    pub beat_type: ::libc::c_float,
    pub ticks_per_beat: ::libc::c_double,
    pub beats_per_minute: ::libc::c_double,
    pub frame_time: ::libc::c_double,
    pub next_time: ::libc::c_double,
    pub bbt_offset: jack_nframes_t,
    pub audio_frames_per_video_frame: ::libc::c_float,
    pub video_offset: jack_nframes_t,
    pub padding: [::libc::int32_t; 7usize],
    pub unique_2: jack_unique_t,
}
impl ::std::clone::Clone for Struct__jack_position {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct__jack_position {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type jack_position_t = Struct__jack_position;
pub type JackSyncCallback =
    ::std::option::Option<extern "C" fn(state: jack_transport_state_t,
                                        pos: *mut jack_position_t,
                                        arg: *mut ::libc::c_void)
                              -> ::libc::c_int>;
pub type JackTimebaseCallback =
    ::std::option::Option<extern "C" fn(state: jack_transport_state_t,
                                        nframes: jack_nframes_t,
                                        pos: *mut jack_position_t,
                                        new_pos: ::libc::c_int,
                                        arg: *mut ::libc::c_void) -> ()>;
pub type Enum_Unnamed3 = ::libc::c_uint;
pub const JackTransportState: ::libc::c_uint = 1;
pub const JackTransportPosition: ::libc::c_uint = 2;
pub const JackTransportLoop: ::libc::c_uint = 4;
pub const JackTransportSMPTE: ::libc::c_uint = 8;
pub const JackTransportBBT: ::libc::c_uint = 16;
pub type jack_transport_bits_t = Enum_Unnamed3;
#[repr(C)]
#[derive(Copy)]
pub struct Struct_Unnamed4 {
    pub frame_rate: jack_nframes_t,
    pub usecs: jack_time_t,
    pub valid: jack_transport_bits_t,
    pub transport_state: jack_transport_state_t,
    pub frame: jack_nframes_t,
    pub loop_start: jack_nframes_t,
    pub loop_end: jack_nframes_t,
    pub smpte_offset: ::libc::c_long,
    pub smpte_frame_rate: ::libc::c_float,
    pub bar: ::libc::c_int,
    pub beat: ::libc::c_int,
    pub tick: ::libc::c_int,
    pub bar_start_tick: ::libc::c_double,
    pub beats_per_bar: ::libc::c_float,
    pub beat_type: ::libc::c_float,
    pub ticks_per_beat: ::libc::c_double,
    pub beats_per_minute: ::libc::c_double,
}
impl ::std::clone::Clone for Struct_Unnamed4 {
    fn clone(&self) -> Self { *self }
}
impl ::std::default::Default for Struct_Unnamed4 {
    fn default() -> Self { unsafe { ::std::mem::zeroed() } }
}
pub type jack_transport_info_t = Struct_Unnamed4;
extern "C" {
    pub static mut jack_error_callback:
               ::std::option::Option<extern "C" fn(msg: *const ::libc::c_char)
                                         -> ()>;
    pub static mut jack_info_callback:
               ::std::option::Option<extern "C" fn(msg: *const ::libc::c_char)
                                         -> ()>;
}

#[link(name = "jack")]
extern "C" {
    pub fn jack_release_timebase(client: *mut jack_client_t) -> ::libc::c_int;
    pub fn jack_set_sync_callback(client: *mut jack_client_t,
                                  sync_callback: JackSyncCallback,
                                  arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn jack_set_sync_timeout(client: *mut jack_client_t,
                                 timeout: jack_time_t) -> ::libc::c_int;
    pub fn jack_set_timebase_callback(client: *mut jack_client_t,
                                      conditional: ::libc::c_int,
                                      timebase_callback: JackTimebaseCallback,
                                      arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_transport_locate(client: *mut jack_client_t,
                                 frame: jack_nframes_t) -> ::libc::c_int;
    pub fn jack_transport_query(client: *const jack_client_t,
                                pos: *mut jack_position_t)
     -> jack_transport_state_t;
    pub fn jack_get_current_transport_frame(client: *const jack_client_t)
     -> jack_nframes_t;
    pub fn jack_transport_reposition(client: *mut jack_client_t,
                                     pos: *const jack_position_t)
     -> ::libc::c_int;
    pub fn jack_transport_start(client: *mut jack_client_t) -> ();
    pub fn jack_transport_stop(client: *mut jack_client_t) -> ();
    pub fn jack_get_transport_info(client: *mut jack_client_t,
                                   tinfo: *mut jack_transport_info_t) -> ();
    pub fn jack_set_transport_info(client: *mut jack_client_t,
                                   tinfo: *mut jack_transport_info_t) -> ();
    pub fn jack_get_version(major_ptr: *mut ::libc::c_int,
                            minor_ptr: *mut ::libc::c_int,
                            micro_ptr: *mut ::libc::c_int,
                            proto_ptr: *mut ::libc::c_int) -> ();
    pub fn jack_get_version_string() -> *const ::libc::c_char;
    pub fn jack_client_open(client_name: *const ::libc::c_char,
                            options: jack_options_t,
                            status: *mut jack_status_t, ...)
     -> *mut jack_client_t;
    pub fn jack_client_new(client_name: *const ::libc::c_char)
     -> *mut jack_client_t;
    pub fn jack_client_close(client: *mut jack_client_t) -> ::libc::c_int;
    pub fn jack_client_name_size() -> ::libc::c_int;
    pub fn jack_get_client_name(client: *mut jack_client_t)
     -> *mut ::libc::c_char;
    pub fn jack_get_uuid_for_client_name(client: *mut jack_client_t,
                                         client_name: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn jack_get_client_name_by_uuid(client: *mut jack_client_t,
                                        client_uuid: *const ::libc::c_char)
     -> *mut ::libc::c_char;
    pub fn jack_internal_client_new(client_name: *const ::libc::c_char,
                                    load_name: *const ::libc::c_char,
                                    load_init: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_internal_client_close(client_name: *const ::libc::c_char)
     -> ();
    pub fn jack_activate(client: *mut jack_client_t) -> ::libc::c_int;
    pub fn jack_deactivate(client: *mut jack_client_t) -> ::libc::c_int;
    pub fn jack_get_client_pid(name: *const ::libc::c_char) -> ::libc::c_int;
    pub fn jack_client_thread_id(client: *mut jack_client_t)
     -> jack_native_thread_t;
    pub fn jack_is_realtime(client: *mut jack_client_t) -> ::libc::c_int;
    pub fn jack_thread_wait(client: *mut jack_client_t, status: ::libc::c_int)
     -> jack_nframes_t;
    pub fn jack_cycle_wait(client: *mut jack_client_t) -> jack_nframes_t;
    pub fn jack_cycle_signal(client: *mut jack_client_t,
                             status: ::libc::c_int) -> ();
    pub fn jack_set_process_thread(client: *mut jack_client_t,
                                   thread_callback: JackThreadCallback,
                                   arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn jack_set_thread_init_callback(client: *mut jack_client_t,
                                         thread_init_callback:
                                             JackThreadInitCallback,
                                         arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_on_shutdown(client: *mut jack_client_t,
                            shutdown_callback: JackShutdownCallback,
                            arg: *mut ::libc::c_void) -> ();
    pub fn jack_on_info_shutdown(client: *mut jack_client_t,
                                 shutdown_callback: JackInfoShutdownCallback,
                                 arg: *mut ::libc::c_void) -> ();
    pub fn jack_set_process_callback(client: *mut jack_client_t,
                                     process_callback: JackProcessCallback,
                                     arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_freewheel_callback(client: *mut jack_client_t,
                                       freewheel_callback:
                                           JackFreewheelCallback,
                                       arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_buffer_size_callback(client: *mut jack_client_t,
                                         bufsize_callback:
                                             JackBufferSizeCallback,
                                         arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_sample_rate_callback(client: *mut jack_client_t,
                                         srate_callback:
                                             JackSampleRateCallback,
                                         arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_client_registration_callback(client: *mut jack_client_t,
                                                 registration_callback:
                                                     JackClientRegistrationCallback,
                                                 arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_port_registration_callback(client: *mut jack_client_t,
                                               registration_callback:
                                                   JackPortRegistrationCallback,
                                               arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_port_connect_callback(client: *mut jack_client_t,
                                          connect_callback:
                                              JackPortConnectCallback,
                                          arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_port_rename_callback(client: *mut jack_client_t,
                                         rename_callback:
                                             JackPortRenameCallback,
                                         arg: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_graph_order_callback(client: *mut jack_client_t,
                                         graph_callback:
                                             JackGraphOrderCallback,
                                         arg1: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_xrun_callback(client: *mut jack_client_t,
                                  xrun_callback: JackXRunCallback,
                                  arg: *mut ::libc::c_void) -> ::libc::c_int;
    pub fn jack_set_latency_callback(client: *mut jack_client_t,
                                     latency_callback: JackLatencyCallback,
                                     arg1: *mut ::libc::c_void)
     -> ::libc::c_int;
    pub fn jack_set_freewheel(client: *mut jack_client_t,
                              onoff: ::libc::c_int) -> ::libc::c_int;
    pub fn jack_set_buffer_size(client: *mut jack_client_t,
                                nframes: jack_nframes_t) -> ::libc::c_int;
    pub fn jack_get_sample_rate(arg1: *mut jack_client_t) -> jack_nframes_t;
    pub fn jack_get_buffer_size(arg1: *mut jack_client_t) -> jack_nframes_t;
    pub fn jack_engine_takeover_timebase(arg1: *mut jack_client_t)
     -> ::libc::c_int;
    pub fn jack_cpu_load(client: *mut jack_client_t) -> ::libc::c_float;
    pub fn jack_port_register(client: *mut jack_client_t,
                              port_name: *const ::libc::c_char,
                              port_type: *const ::libc::c_char,
                              flags: ::libc::c_ulong,
                              buffer_size: ::libc::c_ulong)
     -> *mut jack_port_t;
    pub fn jack_port_unregister(client: *mut jack_client_t,
                                port: *mut jack_port_t) -> ::libc::c_int;
    pub fn jack_port_get_buffer(port: *mut jack_port_t, arg1: jack_nframes_t)
     -> *mut ::libc::c_void;
    pub fn jack_port_uuid(port: *const jack_port_t) -> jack_uuid_t;
    pub fn jack_port_name(port: *const jack_port_t) -> *const ::libc::c_char;
    pub fn jack_port_short_name(port: *const jack_port_t)
     -> *const ::libc::c_char;
    pub fn jack_port_flags(port: *const jack_port_t) -> ::libc::c_int;
    pub fn jack_port_type(port: *const jack_port_t) -> *const ::libc::c_char;
    pub fn jack_port_type_id(port: *const jack_port_t) -> jack_port_type_id_t;
    pub fn jack_port_is_mine(client: *const jack_client_t,
                             port: *const jack_port_t) -> ::libc::c_int;
    pub fn jack_port_connected(port: *const jack_port_t) -> ::libc::c_int;
    pub fn jack_port_connected_to(port: *const jack_port_t,
                                  port_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_port_get_connections(port: *const jack_port_t)
     -> *mut *const ::libc::c_char;
    pub fn jack_port_get_all_connections(client: *const jack_client_t,
                                         port: *const jack_port_t)
     -> *mut *const ::libc::c_char;
    pub fn jack_port_tie(src: *mut jack_port_t, dst: *mut jack_port_t)
     -> ::libc::c_int;
    pub fn jack_port_untie(port: *mut jack_port_t) -> ::libc::c_int;
    pub fn jack_port_set_name(port: *mut jack_port_t,
                              port_name: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_port_set_alias(port: *mut jack_port_t,
                               alias: *const ::libc::c_char) -> ::libc::c_int;
    pub fn jack_port_unset_alias(port: *mut jack_port_t,
                                 alias: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_port_get_aliases(port: *const jack_port_t,
                                 aliases: *mut *mut ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_port_request_monitor(port: *mut jack_port_t,
                                     onoff: ::libc::c_int) -> ::libc::c_int;
    pub fn jack_port_request_monitor_by_name(client: *mut jack_client_t,
                                             port_name: *const ::libc::c_char,
                                             onoff: ::libc::c_int)
     -> ::libc::c_int;
    pub fn jack_port_ensure_monitor(port: *mut jack_port_t,
                                    onoff: ::libc::c_int) -> ::libc::c_int;
    pub fn jack_port_monitoring_input(port: *mut jack_port_t)
     -> ::libc::c_int;
    pub fn jack_connect(client: *mut jack_client_t,
                        source_port: *const ::libc::c_char,
                        destination_port: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_disconnect(client: *mut jack_client_t,
                           source_port: *const ::libc::c_char,
                           destination_port: *const ::libc::c_char)
     -> ::libc::c_int;
    pub fn jack_port_disconnect(client: *mut jack_client_t,
                                port: *mut jack_port_t) -> ::libc::c_int;
    pub fn jack_port_name_size() -> ::libc::c_int;
    pub fn jack_port_type_size() -> ::libc::c_int;
    pub fn jack_port_type_get_buffer_size(client: *mut jack_client_t,
                                          port_type: *const ::libc::c_char)
     -> ::libc::size_t;
    pub fn jack_port_set_latency(port: *mut jack_port_t, arg1: jack_nframes_t)
     -> ();
    pub fn jack_port_get_latency_range(port: *mut jack_port_t,
                                       mode: jack_latency_callback_mode_t,
                                       range: *mut jack_latency_range_t)
     -> ();
    pub fn jack_port_set_latency_range(port: *mut jack_port_t,
                                       mode: jack_latency_callback_mode_t,
                                       range: *mut jack_latency_range_t)
     -> ();
    pub fn jack_recompute_total_latencies(client: *mut jack_client_t)
     -> ::libc::c_int;
    pub fn jack_port_get_latency(port: *mut jack_port_t) -> jack_nframes_t;
    pub fn jack_port_get_total_latency(client: *mut jack_client_t,
                                       port: *mut jack_port_t)
     -> jack_nframes_t;
    pub fn jack_recompute_total_latency(arg1: *mut jack_client_t,
                                        port: *mut jack_port_t)
     -> ::libc::c_int;
    pub fn jack_get_ports(client: *mut jack_client_t,
                          port_name_pattern: *const ::libc::c_char,
                          type_name_pattern: *const ::libc::c_char,
                          flags: ::libc::c_ulong)
     -> *mut *const ::libc::c_char;
    pub fn jack_port_by_name(client: *mut jack_client_t,
                             port_name: *const ::libc::c_char)
     -> *mut jack_port_t;
    pub fn jack_port_by_id(client: *mut jack_client_t,
                           port_id: jack_port_id_t) -> *mut jack_port_t;
    pub fn jack_frames_since_cycle_start(arg1: *const jack_client_t)
     -> jack_nframes_t;
    pub fn jack_frame_time(arg1: *const jack_client_t) -> jack_nframes_t;
    pub fn jack_last_frame_time(client: *const jack_client_t)
     -> jack_nframes_t;
    pub fn jack_get_cycle_times(client: *const jack_client_t,
                                current_frames: *mut jack_nframes_t,
                                current_usecs: *mut jack_time_t,
                                next_usecs: *mut jack_time_t,
                                period_usecs: *mut ::libc::c_float)
     -> ::libc::c_int;
    pub fn jack_frames_to_time(client: *const jack_client_t,
                               arg1: jack_nframes_t) -> jack_time_t;
    pub fn jack_time_to_frames(client: *const jack_client_t,
                               arg1: jack_time_t) -> jack_nframes_t;
    pub fn jack_get_time() -> jack_time_t;
    pub fn jack_set_error_function(func:
                                       ::std::option::Option<extern "C" fn(arg1:
                                                                               *const ::libc::c_char)
                                                                 -> ()>)
     -> ();
    pub fn jack_set_info_function(func:
                                      ::std::option::Option<extern "C" fn(arg1:
                                                                              *const ::libc::c_char)
                                                                -> ()>) -> ();
    pub fn jack_free(ptr: *mut ::libc::c_void) -> ();
}
